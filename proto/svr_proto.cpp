/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: b0e26f31e35a0db9ed2c5e36b4942a71 */

/* creation time: Thu Dec 03 16:03:11 2015 */
/* tdr version: 2.5.1, build at 20120623 */

#if defined(_WIN32) || defined(_WIN64)
#pragma warning(disable:4996)
#endif

#include "svr_proto.h"
#include "TdrTypeUtil.h"

using tsf4g_tdr::TdrBufUtil;
using tsf4g_tdr::TdrTypeUtil;

namespace svr_proto
{


TdrError::ErrorType
Axis::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
Axis::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Axis::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Axis::CURRVERSION < cutVer)
    {
        cutVer = Axis::CURRVERSION;
    }

    /* check cutversion */
    if (Axis::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->x_axis_ */
    {
        ret = destBuf.writeUInt32(this->x_axis_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->y_axis_ */
    {
        ret = destBuf.writeUInt32(this->y_axis_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Axis::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Axis::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Axis::CURRVERSION < cutVer)
    {
        cutVer = Axis::CURRVERSION;
    }

    /* check cutversion */
    if (Axis::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->x_axis_ */
    {
        ret = srcBuf.readUInt32(this->x_axis_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->y_axis_ */
    {
        ret = srcBuf.readUInt32(this->y_axis_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
Axis::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Axis::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->x_axis_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[x_axis_]", "%u", this->x_axis_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->y_axis_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[y_axis_]", "%u", this->y_axis_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
Axis::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
Axis::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
Sight::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
Sight::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Sight::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Sight::CURRVERSION < cutVer)
    {
        cutVer = Sight::CURRVERSION;
    }

    /* check cutversion */
    if (Sight::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->count_ */
    {
        ret = destBuf.writeUInt32(this->count_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->axis_ */
    {
        if (MAX_SIGHT_COUNT < this->count_)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t axis__i = 0; axis__i < this->count_; axis__i++)
        {
            ret = this->axis_[axis__i].pack(destBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
Sight::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Sight::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || Sight::CURRVERSION < cutVer)
    {
        cutVer = Sight::CURRVERSION;
    }

    /* check cutversion */
    if (Sight::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->count_ */
    {
        ret = srcBuf.readUInt32(this->count_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->axis_ */
    {
        if (MAX_SIGHT_COUNT < this->count_)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
        }
        for (uint32_t axis__i = 0; axis__i < this->count_; axis__i++)
        {
            ret = this->axis_[axis__i].unpack(srcBuf, cutVer);
            if (TdrError::TDR_NO_ERROR != ret)
            {
                TSF4G_TDR_DEBUG_TRACE();
                return ret;
            }
        }
    }

    return ret;
}

TdrError::ErrorType
Sight::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
Sight::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->count_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[count_]", "%u", this->count_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->axis_ */
    if (MAX_SIGHT_COUNT < this->count_)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_REFER_SURPASS_COUNT;
    }
    for (uint32_t axis__i = 0; axis__i < this->count_; axis__i++)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[axis_]", axis__i, true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->axis_[axis__i] */
        if (0 > indent)
        {
            ret = this->axis_[axis__i].visualize(destBuf, indent, separator);
        } else
        {
            ret = this->axis_[axis__i].visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

const char*
Sight::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
Sight::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
PlayerLogin::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
PlayerLogin::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerLogin::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayerLogin::CURRVERSION < cutVer)
    {
        cutVer = PlayerLogin::CURRVERSION;
    }

    /* check cutversion */
    if (PlayerLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->uin_ */
    {
        ret = destBuf.writeUInt32(this->uin_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayerLogin::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerLogin::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayerLogin::CURRVERSION < cutVer)
    {
        cutVer = PlayerLogin::CURRVERSION;
    }

    /* check cutversion */
    if (PlayerLogin::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->uin_ */
    {
        ret = srcBuf.readUInt32(this->uin_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayerLogin::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerLogin::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->uin_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[uin_]", "%u", this->uin_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
PlayerLogin::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
PlayerLogin::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
PlayerSight::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
PlayerSight::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerSight::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayerSight::CURRVERSION < cutVer)
    {
        cutVer = PlayerSight::CURRVERSION;
    }

    /* check cutversion */
    if (PlayerSight::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->uin_ */
    {
        ret = destBuf.writeUInt32(this->uin_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->sight_ */
    {
        ret = this->sight_.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->time_ */
    {
        ret = destBuf.writeUInt32(this->time_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayerSight::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerSight::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayerSight::CURRVERSION < cutVer)
    {
        cutVer = PlayerSight::CURRVERSION;
    }

    /* check cutversion */
    if (PlayerSight::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->uin_ */
    {
        ret = srcBuf.readUInt32(this->uin_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->sight_ */
    {
        ret = this->sight_.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->time_ */
    {
        ret = srcBuf.readUInt32(this->time_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayerSight::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerSight::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->uin_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[uin_]", "%u", this->uin_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->sight_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[sight_]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->sight_ */
    if (0 > indent)
    {
        ret = this->sight_.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->sight_.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->time_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[time_]", "%u", this->time_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
PlayerSight::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
PlayerSight::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
PlayerGetAxis::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
PlayerGetAxis::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerGetAxis::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayerGetAxis::CURRVERSION < cutVer)
    {
        cutVer = PlayerGetAxis::CURRVERSION;
    }

    /* check cutversion */
    if (PlayerGetAxis::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->uin_ */
    {
        ret = destBuf.writeUInt32(this->uin_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->time_ */
    {
        ret = destBuf.writeUInt32(this->time_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayerGetAxis::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerGetAxis::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || PlayerGetAxis::CURRVERSION < cutVer)
    {
        cutVer = PlayerGetAxis::CURRVERSION;
    }

    /* check cutversion */
    if (PlayerGetAxis::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->uin_ */
    {
        ret = srcBuf.readUInt32(this->uin_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->time_ */
    {
        ret = srcBuf.readUInt32(this->time_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
PlayerGetAxis::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
PlayerGetAxis::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->uin_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[uin_]", "%u", this->uin_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->time_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[time_]", "%u", this->time_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
PlayerGetAxis::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
PlayerGetAxis::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SvrPkgHead::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SvrPkgHead::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkgHead::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SvrPkgHead::CURRVERSION < cutVer)
    {
        cutVer = SvrPkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (SvrPkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* pack member: this->pkg_len_ */
    {
        ret = destBuf.writeUInt32(this->pkg_len_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->cmd_ */
    {
        ret = destBuf.writeUInt32(this->cmd_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SvrPkgHead::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkgHead::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SvrPkgHead::CURRVERSION < cutVer)
    {
        cutVer = SvrPkgHead::CURRVERSION;
    }

    /* check cutversion */
    if (SvrPkgHead::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->pkg_len_ */
    {
        ret = srcBuf.readUInt32(this->pkg_len_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->cmd_ */
    {
        ret = srcBuf.readUInt32(this->cmd_);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SvrPkgHead::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkgHead::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->pkg_len_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[pkg_len_]", "%u", this->pkg_len_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->cmd_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[cmd_]", "%u", this->cmd_);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SvrPkgHead::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SvrPkgHead::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


TdrError::ErrorType
SvrPkgBody::construct(int64_t selector)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (SVR_CMD_CS_PLAYER_LOGIN == selector)
    {
        ret = this->player_login_.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_SC_PLAYER_SIGHT == selector)
    {
        ret = this->player_sight_.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_CS_PLAYER_GET_AXIS == selector)
    {
        ret = this->player_get_axis_.construct();
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SvrPkgBody::pack(int64_t selector, char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(selector, destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkgBody::pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer) const
{
    /* adjust cutversion */
    if (0 == cutVer || SvrPkgBody::CURRVERSION < cutVer)
    {
        cutVer = SvrPkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (SvrPkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (SVR_CMD_CS_PLAYER_LOGIN == selector)
    {
        ret = this->player_login_.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_SC_PLAYER_SIGHT == selector)
    {
        ret = this->player_sight_.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_CS_PLAYER_GET_AXIS == selector)
    {
        ret = this->player_get_axis_.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SvrPkgBody::unpack(int64_t selector, const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(selector, srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkgBody::unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer)
{
    /* adjust cutversion */
    if (0 == cutVer || SvrPkgBody::CURRVERSION < cutVer)
    {
        cutVer = SvrPkgBody::CURRVERSION;
    }

    /* check cutversion */
    if (SvrPkgBody::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (SVR_CMD_CS_PLAYER_LOGIN == selector)
    {
        ret = this->player_login_.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_SC_PLAYER_SIGHT == selector)
    {
        ret = this->player_sight_.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_CS_PLAYER_GET_AXIS == selector)
    {
        ret = this->player_get_axis_.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SvrPkgBody::visualize(int64_t selector, char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(selector, destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkgBody::visualize(int64_t selector, TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    if (SVR_CMD_CS_PLAYER_LOGIN == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[player_login_]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->player_login_ */
        if (0 > indent)
        {
            ret = this->player_login_.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->player_login_.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_SC_PLAYER_SIGHT == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[player_sight_]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->player_sight_ */
        if (0 > indent)
        {
            ret = this->player_sight_.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->player_sight_.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }
    else if (SVR_CMD_CS_PLAYER_GET_AXIS == selector)
    {
        ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[player_get_axis_]", true);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }

        /* visualize children of this->player_get_axis_ */
        if (0 > indent)
        {
            ret = this->player_get_axis_.visualize(destBuf, indent, separator);
        } else
        {
            ret = this->player_get_axis_.visualize(destBuf, indent + 1, separator);
        }
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}


TdrError::ErrorType
SvrPkg::construct()
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    memset(this, 0, sizeof(*this));

    return ret;
}

TdrError::ErrorType
SvrPkg::pack(char* buffer, size_t size, size_t* usedSize, unsigned cutVer) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = pack(destBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkg::pack(TdrWriteBuf& destBuf, unsigned cutVer) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* adjust cutversion */
    if (0 == cutVer || SvrPkg::CURRVERSION < cutVer)
    {
        cutVer = SvrPkg::CURRVERSION;
    }

    /* check cutversion */
    if (SvrPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    const size_t metaSizePos = destBuf.getUsedSize();

    const size_t savedBeginPos = destBuf.getUsedSize();

    /* pack member: this->head_ */
    {
        ret = this->head_.pack(destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* pack member: this->body_ */
    {
        const int64_t selector4body_ = this->head_.cmd_;
        ret = this->body_.pack(selector4body_, destBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* set sizeinfo for SvrPkg */
    const size_t sizeInBuf = destBuf.getUsedSize() - savedBeginPos;
    ret = destBuf.writeUInt32((uint32_t)(sizeInBuf), metaSizePos);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

TdrError::ErrorType
SvrPkg::unpack(const char* buffer, size_t size, size_t* usedSize, unsigned cutVer)
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrReadBuf srcBuf(buffer, size);
    TdrError::ErrorType ret = unpack(srcBuf, cutVer);
    if (NULL != usedSize)
    {
        *usedSize = srcBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkg::unpack(TdrReadBuf& srcBuf, unsigned cutVer)
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* get sizeinfo for SvrPkg */
    /* get meta's sizeinfo-value */
    uint32_t sizeInBuf;
    ret = srcBuf.readUInt32(sizeInBuf, srcBuf.getUsedSize() + 0);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* check srcBuf contains enough bytes specified by sizeinfo */
    if (srcBuf.getLeftSize() < sizeInBuf)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_SHORT_BUF_FOR_READ;
    }

    /* adjust cutversion */
    if (0 == cutVer || SvrPkg::CURRVERSION < cutVer)
    {
        cutVer = SvrPkg::CURRVERSION;
    }

    /* check cutversion */
    if (SvrPkg::BASEVERSION > cutVer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_CUTVER_TOO_SMALL;
    }

    /* unpack member: this->head_ */
    {
        ret = this->head_.unpack(srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    /* unpack member: this->body_ */
    {
        const int64_t selector4body_ = this->head_.cmd_;
        ret = this->body_.unpack(selector4body_, srcBuf, cutVer);
        if (TdrError::TDR_NO_ERROR != ret)
        {
            TSF4G_TDR_DEBUG_TRACE();
            return ret;
        }
    }

    return ret;
}

TdrError::ErrorType
SvrPkg::visualize(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return TdrError::TDR_ERR_NULL_POINTER_PARAMETER;
    }

    TdrWriteBuf destBuf(buffer, size);
    TdrError::ErrorType ret = visualize(destBuf, indent, separator);
    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return ret;
}

TdrError::ErrorType
SvrPkg::visualize(TdrWriteBuf& destBuf, int indent, char separator) const
{
    TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;

    /* visualize member: this->head_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[head_]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->head_ */
    if (0 > indent)
    {
        ret = this->head_.visualize(destBuf, indent, separator);
    } else
    {
        ret = this->head_.visualize(destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize member: this->body_ */
    ret = TdrBufUtil::printVariable(destBuf, indent, separator, "[body_]", true);
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    /* visualize children of this->body_ */
    const int64_t selector4body_ = this->head_.cmd_;
    if (0 > indent)
    {
        ret = this->body_.visualize(selector4body_, destBuf, indent, separator);
    } else
    {
        ret = this->body_.visualize(selector4body_, destBuf, indent + 1, separator);
    }
    if (TdrError::TDR_NO_ERROR != ret)
    {
        TSF4G_TDR_DEBUG_TRACE();
        return ret;
    }

    return ret;
}

const char*
SvrPkg::visualize_ex(char* buffer, size_t size, size_t* usedSize, int indent, char separator) const
{
    if (NULL == buffer || 0 == size)
    {
        return "";
    }

    TdrWriteBuf destBuf(buffer, size);
    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = size;
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    buffer[targetPos] = '\0';

    if (NULL != usedSize)
    {
        *usedSize = destBuf.getUsedSize();
    }

    return destBuf.getBeginPtr();
}

const char*
SvrPkg::visualize_ex(TdrWriteBuf& destBuf, int indent, char separator) const
{
    if (NULL == destBuf.getBeginPtr() || 0 == destBuf.getTotalSize())
    {
        return "";
    }

    visualize(destBuf, indent, separator);

    size_t targetPos = destBuf.getUsedSize();
    const size_t totalSize = destBuf.getTotalSize();
    if (totalSize <= targetPos)
    {
        targetPos = totalSize - 1;
    }
    destBuf.writeChar('\0', targetPos);

    return destBuf.getBeginPtr();
}


}
