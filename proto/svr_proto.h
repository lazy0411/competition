/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: b0e26f31e35a0db9ed2c5e36b4942a71 */

/* creation time: Thu Dec 03 16:03:11 2015 */
/* tdr version: 2.5.1, build at 20120623 */

#ifndef _svr_proto_h_
#define _svr_proto_h_

#include "TdrBuf.h"
#include "TdrError.h"
#include "TdrBufUtil.h"
#include "TdrTypeUtil.h"


using tsf4g_tdr::TdrError;
using tsf4g_tdr::TdrReadBuf;
using tsf4g_tdr::TdrWriteBuf;

namespace svr_proto
{


enum
{
    MAX_SIGHT_COUNT = 1000000, // 一个玩家视野内玩家数的最大值
};


enum SvrCMD // 协议号，其中SC表示下行，CS表示上行，无表示上下行通用
{
    SVR_CMD_CS_PLAYER_LOGIN = 10001, // 
    SVR_CMD_SC_PLAYER_SIGHT = 10002, // 
    SVR_CMD_CS_PLAYER_GET_AXIS = 10003, // 
};


#pragma pack(1)


class Axis
{
    public: /* members */
        uint32_t x_axis_; // 横坐标
        uint32_t y_axis_; // 纵坐标

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       Axis          tagAxis;
typedef       Axis             AXIS;
typedef       Axis*          LPAXIS;
typedef const Axis*         LCPAXIS;


class Sight
{
    public: /* members */
        uint32_t count_; // 玩家视野内的玩家数
        Axis axis_[MAX_SIGHT_COUNT]; // 玩家视野坐标集合

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       Sight          tagSight;
typedef       Sight             SIGHT;
typedef       Sight*          LPSIGHT;
typedef const Sight*         LCPSIGHT;


class PlayerLogin
{
    public: /* members */
        uint32_t uin_; // 玩家唯一标识

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       PlayerLogin          tagPlayerLogin;
typedef       PlayerLogin             PLAYERLOGIN;
typedef       PlayerLogin*          LPPLAYERLOGIN;
typedef const PlayerLogin*         LCPPLAYERLOGIN;


class PlayerSight
{
    public: /* members */
        uint32_t uin_; // 玩家唯一标识
        Sight sight_; // 玩家视野数据
        uint32_t time_; // 时间戳

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       PlayerSight          tagPlayerSight;
typedef       PlayerSight             PLAYERSIGHT;
typedef       PlayerSight*          LPPLAYERSIGHT;
typedef const PlayerSight*         LCPPLAYERSIGHT;


class PlayerGetAxis
{
    public: /* members */
        uint32_t uin_; // 玩家唯一标识
        uint32_t time_; // 时间戳

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       PlayerGetAxis          tagPlayerGetAxis;
typedef       PlayerGetAxis             PLAYERGETAXIS;
typedef       PlayerGetAxis*          LPPLAYERGETAXIS;
typedef const PlayerGetAxis*         LCPPLAYERGETAXIS;


class SvrPkgHead
{
    public: /* members */
        uint32_t pkg_len_;
        uint32_t cmd_;

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SvrPkgHead          tagSvrPkgHead;
typedef       SvrPkgHead             SVRPKGHEAD;
typedef       SvrPkgHead*          LPSVRPKGHEAD;
typedef const SvrPkgHead*         LCPSVRPKGHEAD;


class SvrPkgBody
{
    public: /* members */
        union
        {
            PlayerLogin player_login_; // 玩家登录
            PlayerSight player_sight_; // 玩家视野数据
            PlayerGetAxis player_get_axis_; // 玩家获取当前坐标和视野数据
        };

    public: /* methods */
        TdrError::ErrorType construct(int64_t selector);

        TdrError::ErrorType pack(int64_t selector, TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(int64_t selector, char* buffer, size_t size,
                                 size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(int64_t selector, TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(int64_t selector, const char* buffer, size_t size,
                                   size_t* usedSize = NULL, unsigned cutVer = 0);

        TdrError::ErrorType visualize(int64_t selector, TdrWriteBuf& destBuf,
                                      int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(int64_t selector, char* buffer, size_t size,
                                      size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SvrPkgBody          tagSvrPkgBody;
typedef       SvrPkgBody             SVRPKGBODY;
typedef       SvrPkgBody*          LPSVRPKGBODY;
typedef const SvrPkgBody*         LCPSVRPKGBODY;


class SvrPkg
{
    public: /* members */
        SvrPkgHead head_;
        SvrPkgBody body_;

    public: /* methods */
        TdrError::ErrorType construct();

        TdrError::ErrorType pack(TdrWriteBuf& destBuf, unsigned cutVer = 0) const;
        TdrError::ErrorType pack(char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0) const;

        TdrError::ErrorType unpack(TdrReadBuf& srcBuf, unsigned cutVer = 0);
        TdrError::ErrorType unpack(const char* buffer, size_t size, size_t* usedSize = NULL, unsigned cutVer = 0);

        /* set indent = -1 to disable indent */
        TdrError::ErrorType visualize(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        TdrError::ErrorType visualize(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(TdrWriteBuf& destBuf, int indent = 0, char separator = '\n') const;
        const char* visualize_ex(char* buffer, size_t size, size_t* usedSize = NULL, int indent = 0, char separator = '\n') const;


    public: /* version infomation */
        enum
        {
            BASEVERSION = 1,
            CURRVERSION = 1,
        };
};

typedef       SvrPkg          tagSvrPkg;
typedef       SvrPkg             SVRPKG;
typedef       SvrPkg*          LPSVRPKG;
typedef const SvrPkg*         LCPSVRPKG;


#pragma pack()

}
#endif
